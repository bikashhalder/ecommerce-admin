// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  @@map("users")
}
 
model VerificationToken {
  id         String    @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Store {
  id          String  @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[] @relation("StoreToCategory")
  products    Product[] @relation("StoreToProduct")
  orders      Order[] @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Billboard {
  id          String @id @default(uuid())
  storedId    String
  store       Store @relation("StoreToBillboard", fields: [storedId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        String @id @default(uuid())
  storeId   String
  name      String
  store     Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId   String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  images Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id    String @id @default(uuid())
  productId  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id    String @id @default(uuid())
  storeId   String
  store   Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone   String @default("")
  address   String @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id    String @id @default(uuid())
  orderId   String
  order   Order @relation(fields: [orderId], references: [id])
  productId   String
  product   Product @relation(fields: [productId], references: [id])
}